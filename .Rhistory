Cyprinodon = read.csv("Cyprinodon_Master.csv")
ACyprinodon = Cyprinodon[-which(Cyprinodon$Sex=='Juvenile'),]
ASPCyprinodon = ACyprinodon[-which(ACyprinodon$Fzebrinus=='No data'),]
#Removed Unidentified Sexes
#df$sex = factor(df$sex) <- this will
#                         remove the catagory "Unidentified" as it is
#                         still being noticed with 0
ACyprinodon$Sex = factor(ACyprinodon$Sex)
ASex = ACyprinodon$Sex
AHabitat = ACyprinodon$Habitat
ASPCyprinodon$Fzebrinus <- as.character(ASPCyprinodon$Fzebrinus)
ASPCyprinodon$Gaffinis <- as.character(ASPCyprinodon$Gaffinis)
ASPCyprinodon$Gnobilis <- as.character(ASPCyprinodon$Gnobilis)
ASPCyprinodon$Lparva <- as.character(ASPCyprinodon$Lparva)
ASPCyprinodon$Lcyanellus <- as.character(ASPCyprinodon$Lcyanellus)
ASPCyprinodon$Fzebrinus <- factor(ASPCyprinodon$Fzebrinus)
ASPCyprinodon$Gaffinis <- factor(ASPCyprinodon$Gaffinis)
ASPCyprinodon$Gnobilis <- factor(ASPCyprinodon$Gnobilis)
ASPCyprinodon$Lparva <- factor(ASPCyprinodon$Lparva)
ASPCyprinodon$Lcyanellus <- factor(ASPCyprinodon$Lcyanellus)
library(geomorph) #Make sure GeoMorph is loaded into R.
ACyprinodonTPS=as.matrix(ACyprinodon[,36:157]) #Set CSV TPS data
ACyprinodonTPS=arrayspecs(ACyprinodonTPS,61,2) #Convert to an array
ACyprinodonTPS[,,1:10]
plot(ACyprinodonTPS[,,1])
plot(ACyprinodonTPS[,,1], asp=1)
points(ACyprinodonTPS[c(31:43,59:61),,1, pch=19, col="red"])
points(ACyprinodonTPS[c(31:43,59:61),,1], pch=19, col="red"])
points(ACyprinodonTPS[c(31:43,59:61),,1], pch=19, col="red")
?fixed.angle
points(ACyprinodonTPS[30,,1], pch=19, col="green")
points(ACyprinodonTPS[30,,1], pch=19, col="orange")
points(ACyprinodonTPS[31,,1], pch=19, col="orange")
plot(ACyprinodonTPS[,,1], asp=1)
points(ACyprinodonTPS[c(31:43,59:61),,1], pch=19, col="red")
plot(ACyprinodonTPS[,,1], asp=1)
points(ACyprinodonTPS[c(31:43,59:61),,1], pch=19, col="red")
points(ACyprinodonTPS[c(31:32),,1], pch=19, col="green")
points(ACyprinodonTPS[c(59:61),,1], pch=19, col="orange")
xxx=fixed.angle(ACyprinodonTPS[,,1], 30,c(31,34),31:43, angle = 0)
xxx=fixed.angle(ACyprinodonTPS[,,1:2], 30,c(31,34),31:43, angle = 0)
plot(xxx[,,1], asp = 1)
plot(xxx[,,2], asp = 1)
xxx=fixed.angle(ACyprinodonTPS[,,1:2], 30,c(31,34),31:43, angle = -.5)
plot(xxx[,,1], asp = 1)
plot(xxx[,,2], asp = 1)
points(ACyprinodonTPS[c(31:43,59:61),,2], pch=19, col="red")
points(xxx[c(31:43,59:61),,2], pch=19, col="red")
xxx=fixed.angle(ACyprinodonTPS[,,1:2], 31,c(31,34),31:43, angle = 0)
plot(xxx[,,1], asp = 1)
plot(xxx[,,2], asp = 1)
plot(xxx[,,1], asp = 1)
points(xxx[c(31:43,59:61),,1], pch=19, col="red")
xxx=fixed.angle(ACyprinodonTPS[,,1:2], 30,c(30,34),30:43, angle = 0)
plot(xxx[,,1], asp = 1)
points(xxx[c(31:43,59:61),,1], pch=19, col="red")
xxx=fixed.angle(ACyprinodonTPS[,,1:2], 30,c(30,34),30:43)
plot(xxx[,,1], asp = 1)
data(plethspecies)
ploth(plethspecies$land[,,1], cex = 2, asp=1)
plot(plethspecies$land[,,1], cex = 2, asp=1)
text(plethspecies$land[,,1], as.character(1:12))
plot(plethspecies$land[,,1], cex = 2, asp=1)
text(plethspecies$land[,,1], as.character(1:12), cex=0.5)
text(plethspecies$land[,,2], as.character(1:12), cex=0.5)
plot(plethspecies$land[,,2], cex = 2, asp=1)
text(plethspecies$land[,,2], as.character(1:12), cex=0.5)
plot(plethspecies$land[,,3], cex = 2, asp=1)
text(plethspecies$land[,,3], as.character(1:12), cex=0.5)
plot(ACyprinodonTPS[,,1], asp=1, cex=2)
tex(ACyprinodonTPS[,,1], as.character(1:61), cex=0.5)
text(ACyprinodonTPS[,,1], as.character(1:61), cex=0.5)
xxx=fixed.angle(ACyprinodonTPS[,,1:2], 30,c(38,61),31:43, angle = 0)
plot(xxx[,,1], asp=1)
plot(xxx[,,2], asp=1)
xxx=fixed.angle(ACyprinodonTPS[,,1:2], 30,c(38,61),31:43, angle = -.25)
plot(xxx[,,1], asp=1)
plot(xxx[,,2], asp=1)
xxx=fixed.angle(ACyprinodonTPS[,,1:5], 30,c(38,61),31:43, angle = -.25)
xxx=fixed.angle(ACyprinodonTPS, 30,c(38,61),31:43, angle = -.25)
plot(xxx[,,3], asp=1)
plot(xxx[,,4], asp=1)
plot(xxx[,,5], asp=1)
plot(xxx[,,6], asp=1)
plot(xxx[,,7], asp=1)
plot(xxx[,,8], asp=1)
ACyprinodonTPS <- fixed.angle(ACyprinodonTPS[,,1:2], 30,c(38,61),31:43, angle = -.25)
points(xxx[34:35,,8],pch="red")
points(xxx[34:35,,8],pch=19, col="red")
points(xxx[38:39,,8],pch=19, col="green")
sliders <- rbind(c(1,2,3),
c(2,3,4),
c(3,4,5),
c(4,5,6),
c(5,6,7),
c(6,7,8),
c(9,10,11),
c(10,11,12),
c(11,12,13),
c(12,13,14),
c(13,14,15),
c(14,15,16),
c(15,16,17),
c(16,17,18),
c(17,18,19),
c(18,19,20),
c(21,22,23),
c(22,23,24),
c(23,24,25),
c(24,25,26),
c(25,26,27),
c(26,27,28),
c(27,28,29),
c(28,29,30),
c(31,32,1),
c(33,34,35),
c(34,35,36),
c(35,36,37),
c(36,37,38),
c(37,38,39),
c(38,39,40),
c(39,40,41),
c(40,41,42),
c(41,42,43),
c(42,43,44),
c(43,44,33),
c(30,31,32),
c(31,32,33),
c(32,33,34),
c(34,35,36),
c(35,36,37),
c(36,37,38),
c(38,39,40),
c(40,41,42),
c(41,42,43),
c(42,43,30)
)
Y.gpa <- gpagen(ACyprinodonTPS, curves = sliders,
PrinAxes = TRUE, max.iter = NULL, ProcD = FALSE,
Proj = TRUE) #create a value for GPA
plot(Y.gpa)
ACyprinodonTPS <- fixed.angle(ACyprinodonTPS, 30,c(38,61),31:43, angle = -.25)
ACyprinodonTPS=as.matrix(ACyprinodon[,36:157]) #Set CSV TPS data
ACyprinodonTPS=arrayspecs(ACyprinodonTPS,61,2) #Convert to an array
ACyprinodonTPS[,,1:10]
ACyprinodonTPS <- fixed.angle(ACyprinodonTPS, 30,c(38,61),31:43, angle = -.25)
sliders <- rbind(c(1,2,3),
c(2,3,4),
c(3,4,5),
c(4,5,6),
c(5,6,7),
c(6,7,8),
c(9,10,11),
c(10,11,12),
c(11,12,13),
c(12,13,14),
c(13,14,15),
c(14,15,16),
c(15,16,17),
c(16,17,18),
c(17,18,19),
c(18,19,20),
c(21,22,23),
c(22,23,24),
c(23,24,25),
c(24,25,26),
c(25,26,27),
c(26,27,28),
c(27,28,29),
c(28,29,30),
c(31,32,1),
c(33,34,35),
c(34,35,36),
c(35,36,37),
c(36,37,38),
c(37,38,39),
c(38,39,40),
c(39,40,41),
c(40,41,42),
c(41,42,43),
c(42,43,44),
c(43,44,33),
c(30,31,32),
c(31,32,33),
c(32,33,34),
c(34,35,36),
c(35,36,37),
c(36,37,38),
c(38,39,40),
c(40,41,42),
c(41,42,43),
c(42,43,30)
)
Y.gpa <- gpagen(ACyprinodonTPS, curves = sliders,
PrinAxes = TRUE, max.iter = NULL, ProcD = FALSE,
Proj = TRUE) #create a value for GPA
plot(Y.gpa)
Cdf <- rrpp.data.frame(shape = two.d.array(Y.gpa$coords),
CS = Y.gpaHeadTPS$Csize,
logCS = log(Y.gpaHeadTPS$Csize),
Hab = ACyprinodon$Habitat,
Year = ACyprinodon$Year,
Month = ACyprinodon$Month,
Sal = ACyprinodon$SalinityDes,
Loc = ACyprinodon$Locality,
Sex = ACyprinodon$Sex,
Cat = factor(ACyprinodon$Cat.))
Cdf$sample <- factor(paste(Cdf$Year, Cdf$Month, sep = "."))
Cdf <- rrpp.data.frame(shape = two.d.array(Y.gpa$coords),
CS = Y.gpa$Csize,
logCS = log(Y.gpa$Csize),
Hab = ACyprinodon$Habitat,
Year = ACyprinodon$Year,
Month = ACyprinodon$Month,
Sal = ACyprinodon$SalinityDes,
Loc = ACyprinodon$Locality,
Sex = ACyprinodon$Sex,
Cat = factor(ACyprinodon$Cat.))
Cdf$sample <- factor(paste(Cdf$Year, Cdf$Month, sep = "."))
mlab <- which(ASex == "Male")
flab <- which(ASex == "Female")
Cdfm <- lapply(1:length(Cdf), function(j){
if(is.matrix(Cdf[[j]])) Cdf[[j]][mlab,] else Cdf[[j]][mlab]
})
names(Cdfm) = names(Cdf)
Cdff <- lapply(1:length(Cdf), function(j){
if(is.matrix(Cdf[[j]])) Cdf[[j]][flab,] else Cdf[[j]][flab]
})
names(Cdff) = names(Cdf)
fit <- lm.rrpp(shape ~ logCS * Loc + logCS * sample + locCS * (Loc/sample),
data = cdf)
fit <- lm.rrpp(shape ~ logCS * Loc + logCS * sample + locCS * (Loc/sample) +
logCS * Sex,
data = Cdf)
fit <- lm.rrpp(shape ~ logCS * Loc + logCS * sample + logCS * (Loc/sample) +
logCS * Sex,
data = Cdf)
anova(fit)
fit2 <- lm.rrpp(shape ~ logCS + Loc + Sample + (Loc/sample)
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS + Loc + Sample + (Loc/sample),
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS + Loc + sample + (Loc/sample),
data = Cdf)
anova(fit2)
anova(fit2,
error = c("Residuals", "Loc:sample", "Loc:sample", "Residuals"))
preds <- data.frame(Loc = levels(Loc))
preds <- data.frame(Loc = levels(Cdf$Loc))
preds
rownames(preds) <- levels(Cdf$Loc)
fit2.pred <- predict(fit, newdata = preds)
plot(fit2.pred, PC=TRUE, ellipse = TRUE)
fit2 <- lm.rrpp(shape ~ logCS + Loc + sample + Hab +
(Hab/Loc) + (Loc/sample),
data = Cdf)
anova(fit2)
fit2 <- lm.rrpp(shape ~ logCS + Hab + Loc + sample +
(Hab/Loc) + (Loc/sample),
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS + Hab + Loc + sample +
Hab/Loc/sample,
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS + Hab + sample +
Hab/sample,
data = Cdf)
anova(fit2)
fit2 <- lm.rrpp(shape ~ logCS + Hab + Loc  +
(Hab/Loc) + (Loc/sample),
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS + Hab +
(Hab/Loc) + (Loc/sample),
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS
(Hab/Loc) + (Loc/sample),
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS +
(Hab/Loc) + (Loc/sample),
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS +
Hab/Loc + Loc/sample,
data = Cdf)
Cdf$Hab
fit2 <- lm.rrpp(shape ~ logCS +
Loc/sample + Hab/Loc,
data = Cdf)
by(Cdf$Loc, Cdf$Hab, nlevels)
by(Cdf$Loc, Cdf$Hab, levels)
fit2 <- lm.rrpp(shape ~ logCS +
Hab/Loc,
data = Cdf)
anova(fit2)
Cdf$sample
anova(fit2)
anova(fit2,
error = c("Residuals", "Hab:sample", "Residuals"))
anova(fit2,
error = c("Residuals", "Hab:sample", "Residuals"))
anova(fit2,
error = c("Residuals", "Hab:Loc", "Residuals"))
preds <- data.frame(Hab = levels(Cdf$Hab))
rownames(preds) <- levels(Cdf$Hab)
fit2.pred <- predict(fit, newdata = preds)
plot(fit2.pred, PC=TRUE, ellipse = TRUE)
preds
fit2.pred <- predict(fit2, newdata = preds)
plot(fit2.pred, PC=TRUE, ellipse = TRUE)
fit2 <- lm.rrpp(shape ~ logCS +
Hab/Loc + Loc/sample,
data = Cdf)
interaction(Cdf$Loc,Cdf$sample)
levels(Cdf$sample)
levels(Cdf$Loc)
fit2 <- lm.rrpp(shape ~ logCS +
Hab/Loc + Hab/sample + Loc/Sample,
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS +
Hab/Loc + Hab/sample + Loc/sample,
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS +
Hab/Loc + Hab/sample,
data = Cdf)
anova(fit2)
fit <- lm.rrpp(shape ~ logCS * Loc + logCS * sample + logCS * (Loc/sample) +
logCS * Sex,
data = Cdf, SS.type = "II")
anova(fit2)
anova(fit2,
error = c("Residuals", "Hab:Loc", "Residuals", "Residuals"))
anova(fit2,
error = c("Residuals", "Hab:sample", "Residuals", "Residuals"))
fit2 <- lm.rrpp(shape ~ logCS +
Hab/(Loc/Sample)
,
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS +
Hab/(Loc/sample),
data = Cdf)
fit2 <- lm.rrpp(shape ~ logCS +
Hab/(Loc/sample),
data = Cdf, SS.type = "II")
anova(fit2)
anova(fit2,
error = c("Residuals", "Hab:Loc", "Hab:Loc:sample", "Residuals"))
preds <- data.frame(Hab = levels(Cdf$Hab))
rownames(preds) <- levels(Cdf$Hab)
fit2.pred <- predict(fit2, newdata = preds)
plot(fit2.pred, PC=TRUE, ellipse = TRUE)
fit2.pred$mean
means <- lapply(1:nrow(fit.2.pred$mean), function(j){
matrix(fit2.pred$mean[j,],61,2,byrow = TRUE)
})
means <- lapply(1:nrow(fit2.pred$mean), function(j){
matrix(fit2.pred$mean[j,],61,2,byrow = TRUE)
})
means
cons <- mshape(Y.gpa$coords)
names(means) <- rownames(fit2.pred$mean)
means
par(mfcol = c(2,2))
for(i in 1:nrow(fit.preds$mean)){
plotRefToTarget(cons, means[[i]])
}
par(mfcol = c(2,2))
for(i in 1:nrow(fit2.preds$mean)){
plotRefToTarget(cons, means[[i]])
}
par(mfcol = c(2,2))
for(i in 1:nrow(fit2.pred$mean)){
plotRefToTarget(cons, means[[i]])
}
par(mfcol=c(1,1))
plot(means[[1]], asp = 1)
plot(Y.gpa$coords, asp = 1)
plot(Y.gpa$coords[,,1], asp = 1)
RRPP:::beta.boot
plot(Y.gpa)
object=fit2
newdata=preds
confidence = 0.95
if(!inherits(object, "lm.rrpp")) stop("Object is not class lm.rrpp")
Terms <- object$LM$Terms
if (missing(newdata) || is.null(newdata)) {
newdata <- model.frame(Terms, data = object$LM$data)
full.predict <- TRUE
} else full.predict = FALSE
if(!inherits(newdata, "data.frame") && !inherits(newdata, "rrpp.data.frame"))
stop("newdata must be an object of class data.frame or rrpp.data.frame")
if(confidence < 0 || confidence > 1) stop("Confidence level must be between 0 and 1")
Y <- object$LM$Y
if(full.predict){
nX <- object$LM$X
n <- NROW(nX)
} else {
fl <- object$LM$term.labels
tl <- intersect(fl, names(object$LM$data))
pl <- match(tl, names(newdata))
if(all(is.na(pl))) stop("No variables in newdata match variables in lm.rrpp fit")
gl <- names(newdata)[na.omit(pl)]
if(length(gl) != length(tl)) {
cat("\nWarning: Not all variables in model accounted for in newdata.")
cat("\nMissing variables will be averaged from observed data for prediction.\n\n")
}
nd <- as.data.frame(newdata[match(gl, names(newdata))])
if(any(is.na(pl))){
add.l <- tl[is.na(match(tl, names(newdata)))]
nda <- sapply(1:length(add.l), function(j){
x <- rep(0, NROW(nd))
x
})
colnames(nda) <- add.l
nd <- data.frame(cbind(nd, nda))
nd <- nd[, match(tl, names(nd))]
}
od <- object$LM$data
yl <- setdiff(names(od), tl)
df.add <- names(od[yl])
nd.names <- names(nd)
for(i in 1:length(df.add)) nd <- cbind(nd, 0)
names(nd) <- c(nd.names, df.add)
nX <- model.matrix(Terms, data = nd)
oX <- object$LM$X
n <- NROW(nX)
nX <- nX[,intersect(colnames(nX), colnames(oX))]
cnm <- match(colnames(oX), colnames(nX))
if(any(is.na(cnm))){
df.add <- setdiff(colnames(oX), colnames(nX))
nX.names <- colnames(nX)
for(i in 1:length(df.add)) nX <- cbind(nX, 0)
colnames(nX) <- c(nX.names, df.add)
}
isall0 <- function(x) all(x == 0)
nX.check <- apply(nX, 2, isall0)
for(i in 1:length(nX.check)) if(isTRUE(nX.check[[i]])) nX[,i] <- mean(oX[i,])
}
nX
fit2$X
fit2$LM$X
pl
add.l
nda
nd
df.add
nX
nX <- model.matrix(Terms, data = nd)
nX
oX <- object$LM$X
n <- NROW(nX)
intersect(colnames(nX), colnames(oX))
nX <- nX[,intersect(colnames(nX), colnames(oX))]
nX
match(colnames(oX), colnames(nX))
setdiff(colnames(oX), colnames(nX))
df.add <- setdiff(colnames(oX), colnames(nX))
nX.names <- colnames(nX)
for(i in 1:length(df.add)) nX <- cbind(nX, 0)
colnames(nX) <- c(nX.names, df.add)
}
nX
isall0 <- function(x) all(x == 0)
isall0
nX.check <- apply(nX, 2, isall0)
nX.check
for(i in 1:length(nX.check)) if(isTRUE(nX.check[[i]])) nX[,i] <- mean(oX[i,])
nX
nX <- model.matrix(Terms, data = nd)
oX <- object$LM$X
n <- NROW(nX)
nX <- nX[,intersect(colnames(nX), colnames(oX))]
nX
nX
nX.check <- apply(nX, 2, isall0)
nX.check
oX
for(i in 1:length(nX.check))
if(isTRUE(nX.check[[i]])) nX[,i] <- mean(oX[i,])
cnm <- match(colnames(oX), colnames(nX))
if(any(is.na(cnm))){
df.add <- setdiff(colnames(oX), colnames(nX))
nX.names <- colnames(nX)
for(i in 1:length(df.add)) nX <- cbind(nX, 0)
colnames(nX) <- c(nX.names, df.add)
}
nX
library(ACHC)
devtools::document()
?ACHC::plot.achc
devtools::document()
### Set directory to project directory
library(tools)
md5.dat <- as.data.frame(md5sum(dir(".", recursive=T )))
Zdat <- data.frame(md5.dat, paste("*", rownames(md5.dat), sep=""))
Zdat = Zdat[rownames(Zdat)!="MD5",]
write.table(Zdat,"MD5", sep=" ", row.names = F, col.names = F, quote=F)
devtools::install_github("mlcollyer/ACBC")
### Set directory to project directory
library(tools)
md5.dat <- as.data.frame(md5sum(dir(".", recursive=T )))
Zdat <- data.frame(md5.dat, paste("*", rownames(md5.dat), sep=""))
Zdat = Zdat[rownames(Zdat)!="MD5",]
write.table(Zdat,"MD5", sep=" ", row.names = F, col.names = F, quote=F)
devtools::document()
devtools::document()
### Set directory to project directory
library(tools)
md5.dat <- as.data.frame(md5sum(dir(".", recursive=T )))
Zdat <- data.frame(md5.dat, paste("*", rownames(md5.dat), sep=""))
Zdat = Zdat[rownames(Zdat)!="MD5",]
write.table(Zdat,"MD5", sep=" ", row.names = F, col.names = F, quote=F)
devtools:::install_github("mlcollyer/ACBC")
devtools::document()
devtools::document()
